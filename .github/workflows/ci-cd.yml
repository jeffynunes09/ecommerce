name: CI/CD Pipeline

on:
  push:
    branches:
      - main
      - master
      - develop
      - 'feature/*'
      - 'release/*'
      - 'hotfix/*'
  pull_request:
    branches:
      - master
      - develop

jobs:
  # Job para construir a imagem Docker
  build:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    # Configuração do Node.js (caso você tenha dependências Node.js no seu app)
    - name: Set up Node.js
      uses: actions/setup-node@v2
      with:
        node-version: '22'

    # Instalar dependências e rodar testes
    - name: Install dependencies and test
      run: |
        npm install
        npm run test

  # Job para criar a imagem Docker e enviar para Docker Hub
  dockerize-frontend:
    runs-on: ubuntu-latest
    needs: build

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    # Verificar a estrutura do repositório para depuração
    - name: List files to debug
      run: |
        ls -la

    # Construir a imagem Docker
    - name: Build Docker image for Next.js
      run: |
        docker build -t my-frontend ./ecommerce

    # Login no DockerHub
    - name: Docker login
      run: |
        echo ${{ secrets.DOCKER_USERNAME }} | docker login -u ${{ secrets.DOCKER_USERNAME }} --password-stdin

    # Push da imagem Docker para o DockerHub
    - name: Push Docker image to DockerHub
      run: |
        docker tag my-frontend ${{ secrets.DOCKER_USERNAME }}/my-frontend:latest
        docker push ${{ secrets.DOCKER_USERNAME }}/my-frontend:latest

  # Job para o deploy no Render
  deploy:
    runs-on: ubuntu-latest
    needs: dockerize-frontend

    steps:
    - name: Deploy to Render
      uses: render-examples/github-action@v1
      with:
        serviceId: ${{ secrets.RENDER_SERVICE_ID }}
        apiKey: ${{ secrets.RENDER_API_KEY }}
